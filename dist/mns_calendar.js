// Generated by CoffeeScript 1.10.0
(function() {
  var slice = [].slice;

  (function($, window) {
    var MnsCalendar, Row, bind, fn, k, len, overlap_day, ref, tag_name;
    window.tag = function() {
      var attrs, child, id, k, klass, len, name, obj, params, sc;
      name = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      obj = $("<" + name + ">");
      if (typeof params[0] === 'string') {
        sc = params.shift();
        klass = sc.match(/\.[-_0-9a-z]+/gi).join('').replace(/\./g, ' ').trim();
        id = ((sc.match(/\#[-_0-9a-z]+/gi) || [])[0] || '').slice(1);
        obj.attr({
          "class": klass,
          id: id === '' ? null : id
        });
      }
      if (typeof params[0] === 'object' && params[0].constructor.name === 'Object') {
        attrs = params.shift();
        if (Array.isArray(attrs['class'])) {
          attrs['class'] = attrs['class'].join(' ');
        }
        obj.attr(attrs);
      }
      for (k = 0, len = params.length; k < len; k++) {
        child = params[k];
        if (typeof child === 'string') {
          obj.append(document.createTextNode(child));
        } else {
          obj.append(child);
        }
      }
      return obj;
    };
    ref = ['div', 'i', 'span', 'a', 'nav', 'table', 'th', 'tr', 'td'];
    fn = function(s) {
      return window[s] = function() {
        var params;
        params = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return tag.apply(null, [s].concat(slice.call(params)));
      };
    };
    for (k = 0, len = ref.length; k < len; k++) {
      tag_name = ref[k];
      fn(tag_name);
    }
    window['nbsp'] = document.createTextNode(String.fromCharCode(160));
    bind = function(obj, name) {
      return function() {
        return obj[name]();
      };
    };
    overlap_day = function(y, m, d, from, to) {
      var end, start;
      start = new Date(y, m, d);
      end = new Date(y, m, d + 1);
      return !(to < start || from >= end);
    };
    Row = (function() {
      function Row(year, month, start, end, slots) {
        var i, j;
        this.year = year;
        this.month = month;
        this.start = start;
        this.end = end;
        this.slot_count = slots;
        this.slots = (function() {
          var l, ref1, ref2, results;
          results = [];
          for (i = l = ref1 = start, ref2 = end - 1; ref1 <= ref2 ? l <= ref2 : l >= ref2; i = ref1 <= ref2 ? ++l : --l) {
            results.push((function() {
              var n, ref3, results1;
              results1 = [];
              for (j = n = 0, ref3 = slots - 1; 0 <= ref3 ? n <= ref3 : n >= ref3; j = 0 <= ref3 ? ++n : --n) {
                results1.push(true);
              }
              return results1;
            })());
          }
          return results;
        })();
      }

      Row.prototype.add = function(event) {
        var end, i, j, l, n, o, ok, p, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, start;
        ref1 = [null, null], start = ref1[0], end = ref1[1];
        for (i = l = ref2 = this.start, ref3 = this.end - 1; ref2 <= ref3 ? l <= ref3 : l >= ref3; i = ref2 <= ref3 ? ++l : --l) {
          if (overlap_day(this.year, this.month, i, event.start, event.end)) {
            if (start == null) {
              start = i - this.start;
            }
            end = i - this.start;
          }
        }
        if (start === null) {
          return false;
        }
        for (i = n = 0, ref4 = this.slot_count - 1; 0 <= ref4 ? n <= ref4 : n >= ref4; i = 0 <= ref4 ? ++n : --n) {
          ok = true;
          for (j = o = ref5 = start, ref6 = end; ref5 <= ref6 ? o <= ref6 : o >= ref6; j = ref5 <= ref6 ? ++o : --o) {
            if (this.slots[j][i] !== true) {
              ok = false;
              break;
            }
          }
          console.log(ok, start, i);
          if (ok === true) {
            this.slots[start][i] = {
              event: event,
              colspan: end - start + 1,
              start: start + this.start,
              end: end + this.start
            };
            for (j = p = ref7 = start + 1, ref8 = end; p <= ref8; j = p += 1) {
              this.slots[j][i] = false;
            }
            return true;
          }
        }
        return false;
      };

      Row.prototype.render_header = function() {
        var i, l, ref1, ref2, res;
        res = [];
        for (i = l = ref1 = this.start, ref2 = this.end - 1; ref1 <= ref2 ? l <= ref2 : l >= ref2; i = ref1 <= ref2 ? ++l : --l) {
          res.push(th({}, (new Date(this.year, this.month, i)).getDate()));
        }
        return tr('.mns-cal-row-header', res);
      };

      Row.prototype.render_bg = function() {
        var i, is_active;
        return table('.table.table-bordered', tr({}, (function() {
          var l, ref1, ref2, results;
          results = [];
          for (i = l = ref1 = this.start, ref2 = this.end - 1; ref1 <= ref2 ? l <= ref2 : l >= ref2; i = ref1 <= ref2 ? ++l : --l) {
            is_active = (new Date(this.year, this.month, i)).getMonth() === this.month;
            results.push(td((is_active ? {} : '.active')));
          }
          return results;
        }).call(this)));
      };

      Row.prototype.render_label = function(event, at_start, at_end) {
        var klass, res;
        res = [];
        if (event.icon) {
          res.push(i(".fa.fa-" + event.icon));
          res.push(' ');
        }
        res.push(event.title);
        klass = ['label', 'label-primary'];
        if (at_start) {
          klass.push('mns-cal-starts-here');
        }
        if (at_end) {
          klass.push('mns-cal-ends-here');
        }
        return span({
          "class": klass
        }, res);
      };

      Row.prototype.render_slot = function(id) {
        var i, l, obj, res, type;
        res = [];
        for (i = l = 0; l <= 6; i = ++l) {
          obj = this.slots[i][id];
          type = typeof obj;
          console.log(obj, type);
          if (obj === true) {
            res.push(td({}, ''));
          } else if (type === 'object') {
            console.log(obj);
            res.push(td({
              colspan: obj.colspan
            }, this.render_label(obj.event, !overlap_day(this.year, this.month, obj.start - 1, obj.event.start, obj.event.end), !overlap_day(this.year, this.month, obj.end + 1, obj.event.start, obj.event.end))));
          }
        }
        return tr('.mns-cal-row', res);
      };

      Row.prototype.render = function() {
        var html, i, l, ref1;
        html = [this.render_header()];
        for (i = l = 0, ref1 = this.slot_count - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {
          html.push(this.render_slot(i));
        }
        return div('.mns-cal-week', div('.mns-cal-bg', this.render_bg()), div('.mns-cal-rows', table('.table.table-condensed', html)));
      };

      return Row;

    })();
    MnsCalendar = (function() {
      var prefix;

      prefix = 'mns-cal';

      MnsCalendar.prototype.defaults = {
        title: 'MNS Calendar',
        date: [(new Date()).getMonth(), (new Date()).getFullYear()],
        i18n: {
          lang: 'pl',
          translations: {
            months: ['Styczeń', 'Luty', 'Marzec', 'Kwiecień', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpień', 'Wrzesień', 'Październik', 'Listopad', 'Grudzień'],
            today: 'Dzisiaj',
            next: 'Następny miesiąc',
            prev: 'Poprzedni miesiąc',
            week: 'Tydzień'
          }
        }
      };

      function MnsCalendar(el, options) {
        this.options = $.extend({}, this.defaults, options);
        this.$el = $(el);
        this.$el.append(this.setup_skeleton());
        this.title = this.options['title'];
        this.date = this.options['date'];
        this.month = 4;
        this.year = 2016;
        this.start_of_week = 1;
        this.max_slots = 4;
        this.events = [
          {
            title: 'Happy Birthday',
            start: new Date('2016-04-01'),
            end: new Date('2016-05-03'),
            icon: 'birthday-cake',
            "class": 'text-warning'
          }, {
            title: 'Lorem ipsum dolor sit amet enim. Etiam ullamcorper. Suspendisse a pellentesque dui, non felis. Maecenas malesuada elit lectus felis, malesuada ultricies. ',
            start: new Date('2016-05-02'),
            end: new Date('2016-05-15')
          }
        ];
        this.t = this.options['i18n']['translations'];
        this.render();
        this.$el.find('.mns-cal-prev').click(bind(this, 'prev_month'));
        this.$el.find('.mns-cal-next').click(bind(this, 'next_month'));
        this.$el.find('.mns-cal-today').click(bind(this, 'today_month'));
      }

      MnsCalendar.prototype.change_month = function(diff) {
        this.month += diff;
        while (this.month < 0) {
          this.month += 12;
          this.year -= 1;
        }
        while (this.month > 11) {
          this.month -= 12;
          this.year += 1;
        }
        return this.render();
      };

      MnsCalendar.prototype.prev_month = function() {
        return this.change_month(-1);
      };

      MnsCalendar.prototype.next_month = function() {
        return this.change_month(1);
      };

      MnsCalendar.prototype.today_month = function() {
        var now;
        now = new Date();
        this.month = now.getMonth();
        this.year = now.getFullYear();
        return this.render();
      };

      MnsCalendar.prototype.load_data = function() {};

      MnsCalendar.prototype.render = function() {
        var body, day, dow, event, l, len1, len2, len3, n, o, ref1, results, row, rows, start;
        console.log(this, 'Rendering');
        dow = function(y, m, d) {
          return (new Date(y, m, d)).getDay();
        };
        this.update_header();
        rows = [];
        day = 1;
        while (dow(this.year, this.month, day) !== this.start_of_week) {
          day--;
        }
        while (true) {
          start = new Date(this.year, this.month, day);
          if (day > 0 && (start.getDay() === this.start_of_week) && (start.getMonth() !== this.month)) {
            break;
          }
          rows.push(new Row(this.year, this.month, day, day + 7, this.max_slots));
          day += 7;
        }
        ref1 = this.events;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          event = ref1[l];
          for (n = 0, len2 = rows.length; n < len2; n++) {
            row = rows[n];
            row.add(event);
          }
        }
        body = this.$el.find('.mns-cal-body');
        body.empty();
        results = [];
        for (o = 0, len3 = rows.length; o < len3; o++) {
          row = rows[o];
          results.push(body.append(row.render()));
        }
        return results;
      };

      MnsCalendar.prototype.update = function() {};

      MnsCalendar.prototype.update_header = function() {
        this.$el.find('.mns-cal-title').text(this.title);
        return this.$el.find('.mns-cal-date').text(this.t.months[this.month] + " " + this.year);
      };

      MnsCalendar.prototype.setup_skeleton = function() {
        var body, form, header, navbar, t;
        t = {
          'today': 'dzisiaj'
        };
        header = div('.navbar-header', div('.navbar-brand', i('.fa.fa-calendar'), nbsp, span('.mns-cal-title')), div('.navbar-text.mns-cal-date'));
        form = div('.navbar-form.navbar-right', div('.btn-toolbar', div('.btn-group', a('.btn.btn-default.mns-cal-today', t['today'])), div('.btn-group', a('.btn.btn-default.mns-cal-prev', i('.fa.fa-angle-left')), a('.btn.btn-default.mns-cal-next', i('.fa.fa-angle-right')))));
        navbar = nav('.navbar.navbar-default', div('.container-fluid', header, form));
        body = div('.panel.panel-default.mns-cal-body');
        return div('.mns-cal', navbar, body);
      };

      return MnsCalendar;

    })();
    return $.fn.extend({
      MnsCalendar: function() {
        var args, option;
        option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data('mnsCalendar');
          if (!data) {
            $this.data('mnsCalendar', (data = new MnsCalendar(this, option)));
          }
          if (typeof option === 'string') {
            return data[option].apply(data, args);
          }
        });
      }
    });
  })(window.jQuery, window);

  $(function() {
    return $('body').append(a('.btn.btn-default.btn-xs', {
      href: 'http://www.mnslab.pl'
    }, i('.fa.fa-birthday-cake'), ' MNS Lab'));
  });

}).call(this);
